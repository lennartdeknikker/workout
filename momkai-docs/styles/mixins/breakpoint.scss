@use 'sass:math';

/* stylelint-disable */

// Foundation for Sites
// https://get.foundation
// Licensed under MIT Open Source

////
/// @group functions
////

/// Finds the greatest common divisor of two integers.
///
/// @param {Number} $a - First number to compare.
/// @param {Number} $b - Second number to compare.
///
/// @returns {Number} The greatest common divisor.
@function gcd($a, $b) {
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
  @if  $b != 0 {
    @return gcd($b, $a % $b);
  } @else {
    @return abs($a);
  }
}

/// Handles decimal exponents by trying to convert them into a fraction and then use a nth-root-algorithm for parts of the calculation
///
/// @param {Number} $base - The base number.
/// @param {Number} $exponent - The exponent.
///
/// @returns {Number} The product of the exponentiation.
@function pow($base, $exponent, $prec: 16) {
  $value: $base;
  @if  floor($exponent) != $exponent {
    $prec2: pow(10, $prec);
    $exponent: round($exponent * $prec2);
    $denominator: gcd($exponent, $prec2);
    @return nth-root(pow($base, math.div($exponent, $denominator)), math.div($prec2, $denominator), $prec);
  }
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  } @else if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: math.div($value, $base);
    }
  }

  @return $value;
}

@function nth-root($num, $n: 2, $prec: 12) {
  // From: http://rosettacode.org/wiki/Nth_root#JavaScript
  $x: 1;

  @for $i from 0 through $prec {
    $x: math.div(1, $n) * (($n - 1) * $x + math.div($num, pow($x, $n - 1)));
  }

  @return $x;
}

/// Calculates the height as a percentage of the width for a given ratio.
/// @param {List} $ratio - Ratio to use to calculate the height, formatted as `x by y`.
/// @return {Number} A percentage value for the height relative to the width of a responsive container.
@function ratio-to-percentage($ratio) {
  $w: nth($ratio, 1);
  $h: nth($ratio, 3);
  @return math.div($h, $w) * 100%;
}

/// Parse the given `$fraction` to numerators and denumerators.
///
/// @param {*} $fraction - Value representing a fraction to parse. It can be formatted as `50%`, `1 of 2`, `1/2` or `50` (no denominator would be returned).
///
/// @return {List} List of parsed values with numerator at first position and denumerator as second. These values may be null.
@function zf-parse-fraction($fraction) {
  @if type-of($fraction) == 'number' {
    // "50%"
    @if unit($fraction) == '%' {
      @return (strip-unit($fraction), 100);
    } @else if unit($fraction) == '' {
      // "0.5"
      @if $fraction < 1 {
        @return ($fraction * 100, 100);
      }

      // "50"
      @else {
        @return ($fraction, null);
      }
    }
  } @else if type-of($fraction) == 'list' {
    // "50 of 100", "50/100"...
    @if length($fraction) == 3
    and type-of(nth($fraction, 1) == 'number')
    and type-of(nth($fraction, 3) == 'number') {
      @return (nth($fraction, 1), nth($fraction, 3));
    }
  }

  @return (null, null);
}

/// Returns whether the given `$value` represents a fraction. Supports formats like `50%`, `1 of 2`, `1 per 2` or `1/2`.
///
/// @param {*} $value - Value to test.
/// @param {Boolean} $allow-no-denominator [false] - If `true`, simple numbers without denominators like `50` are supported.
///
/// @return {Boolean} `true` if `$value` represents a fraction, `false` otherwise.
@function zf-is-fraction($value, $allow-no-denominator: false) {
  $parsed: zf-parse-fraction($value);
  @return not(nth($parsed, 1) == null
  or (nth($parsed, 2) == null and $allow-no-denominator == false));
}

/// Calculate a percentage from a given fraction.
///
/// @param {Number|List} $fraction - Value representing a fraction to use to calculate the percentage, formatted as `50` (relative to `$denominator`), `50%`, `1 of 2` or `1/2`.
/// @param {Number|List} $denominator - Default value to use as denominator when `$fraction` represents an absolute value.
@function fraction-to-percentage(
  $fraction,
  $denominator: null
) {
  $parsed: zf-parse-fraction($fraction);
  $parsed-nominator: nth($parsed, 1);
  $parsed-denominator: nth($parsed, 2);

  @if $parsed-nominator == null {
    @error 'Wrong syntax for "fraction-to-percentage()". Use a number, decimal, percentage, or "n of n" / "n/n".';
  }
  @if $parsed-denominator == null {
    @if type-of($denominator) == 'number' {
      $parsed-denominator: $denominator;
    } @else {
      @error 'Error with "fraction-to-percentage()". A default "$denominator" is required to support absolute values';
    }
  }

  @return percentage(math.div($parsed-nominator, $parsed-denominator));
}

// Foundation for Sites
// https://get.foundation
// Licensed under MIT Open Source

////
/// @group functions
////

$global-font-size: 100% !default;

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {Number} $num - Number to strip unit from.
///
/// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
  @return math.div($num, ($num * 0 + 1));
}

/// Converts one or more pixel values into matching rem values.
///
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.
///
/// @returns {List} A list of converted values.
@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: math.div($base, 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return -zf-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
@function -zf-bp-to-em($value) {
  // Pixel and unitless values are converted to rems
  @if unit($value) == 'px' or unitless($value) {
    $value: rem-calc($value, $base: 16px);
  }

  // Then the value is converted to ems
  @return strip-unit($value) * 1em;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function -zf-to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'rem' {
    $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0 {
    $value: 0;
  }

  @return $value;
}

/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.
///
/// @param {Number} $value - Value to convert to a unitless line height
/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size
///
/// @return {Number} - Unitless number
@function unitless-calc($value, $base: null) {
  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // First, lets convert our $base to pixels

  // If the base font size is a %, then multiply it by 16px
  @if unit($base) == '%' {
    $base: math.div($base, 100%) * 16px;
  }

  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if unit($base) == 'em' {
    $base: strip-unit($base) * 16px;
  }

  // Now let's convert our value to pixels too
  @if unit($value) == '%' {
    $value: math.div($value, 100%) * $base;
  }

  @if unit($value) == 'rem' {
    $value: strip-unit($value) * $base;
  }

  @if unit($value) == 'em' {
    $value: strip-unit($value) * $base;
  }

  // 'px'
  @if unit($value) == 'px' {
    @return math.div(strip-unit($value), strip-unit($base));
  }

  // assume that line-heights greater than 10 are meant to be absolute in 'px'
  @if unitless($value) and ($value > 10) {
    @return math.div($value, strip-unit($base));
  }

  @return $value;
}

// Foundation for Sites
// https://get.foundation
// Licensed under MIT Open Source

////
/// @group functions
////

/// Determine if a value is not falsey, in CSS terms. Falsey values are `null`, `none`, `0` with any unit, or an empty list.
///
/// @param {Mixed} $val - Value to check.
///
/// @returns {Boolean} `true` if `$val` is not falsey.
@function has-value($val) {
  @if $val == null or $val == none {
    @return false;
  }
  @if type-of($val) == 'number' and strip-unit($val) == 0 {
    @return false;
  }
  @if type-of($val) == 'list' and length($val) == 0 {
    @return false;
  }
  @return true;
}

/// Determine a top/right/bottom/right value on a padding, margin, etc. property, no matter how many values were passed in. Use this function if you need to know the specific side of a value, but don't know if the value is using a shorthand format.
///
/// @param {List|Number} $val - Value to analyze. Should be a shorthand sizing property, e.g. "1em 2em 1em"
/// @param {Keyword} $side - Side to return. Should be `top`, `right`, `bottom`, or `left`.
///
/// @returns {Number} A single value based on `$val` and `$side`.
@function get-side($val, $side) {
  $length: length($val);

  @if $length == 1 {
    @return $val;
  }
  @if $length == 2 {
    @return map-get((
    top: nth($val, 1),
    bottom: nth($val, 1),
    left: nth($val, 2),
    right: nth($val, 2),
    ), $side);
  }
  @if $length == 3 {
    @return map-get((
    top: nth($val, 1),
    left: nth($val, 2),
    right: nth($val, 2),
    bottom: nth($val, 3),
    ), $side);
  }
  @if $length == 4 {
    @return map-get((
    top: nth($val, 1),
    right: nth($val, 2),
    bottom: nth($val, 3),
    left: nth($val, 4),
    ), $side);
  }
}

/// Given border $val, find a specific element of the border, which is $elem. The possible values for $elem are width, style, and color.
///
/// @param {List} $val - Border value to find a value in.
/// @param {Keyword} $elem - Border component to extract.
///
/// @returns {Mixed} If the value exists, returns the value. If the value is not in the border definition, the function will return a 0px width, solid style, or black border.
@function get-border-value($val, $elem) {
  // Defaults
  $defaults: (
  width: 0,
  style: solid,
  color: #000000,
  );
  // Find the width, style, or color and return it
  @each $v in $val {
    $type: type-of($v);
    @if $elem == width and $type == 'number' {
      @return $v;
    }
    @if $elem == style and $type == 'string' {
      @return $v;
    }
    @if $elem == color and $type == 'color' {
      @return $v;
    }
  }

  @return map-get($defaults, $elem);
}

/// Finds a value in a nested map.
/// @link https://css-tricks.com/snippets/sass/deep-getset-maps/ Deep Get/Set in Maps
///
/// @param {Map} $map - Map to pull a value from.
/// @param {String} $keys... - Keys to use when looking for a value.
/// @returns {Mixed} The value found in the map.
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/// Casts a map into a list.
/// @link http://hugogiraudel.com/2014/04/28/casting-map-into-list/
///
/// @param {Map} $map - Map to pull a value from.
///
/// @returns {List} Depending on the flag, returns either $keys or $values or both.
@function map-to-list($map, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($map) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $map {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($map) != 'list', ($value,), $map);
}

/// Return a join of the two given strings `$str1` and `$str2`.
/// If the two strings are not empty, they are separated by `$delimiter`.
///
/// @param {String} $str1 [null] - First string to join.
/// @param {String} $str1 [null] - Second string to join.
/// @param {String} $delimiter [null] - Delimieter between `$str1` and `$str2`.
///
/// @returns {String} Join of `$str1`, `$delimiter` and `$str2`.
@function zf-str-join(
  $str1: null,
  $str2: null,
  $delimiter: null
) {
  $ret: '';

  @if $str1 and str-length($str1) > 0 {
    $ret: $ret + $str1;

    @if $delimiter and str-length($delimiter) > 0 and $str2 and str-length($str2) > 0 {
      $ret: $ret + $delimiter;
    }
  }
  @if $str2 and str-length($str2) > 0 {
    $ret: $ret + $str2;
  }

  @return $ret;
}

/// Safely return a value from a map.
///
/// @param {Map} $map - Map to retrieve a value from.
/// @param {String} $key - Name of the map key.
///
/// @returns {List} Found value.
@function map-safe-get($map, $key) {
  @if  type-of($map) == 'map' or (type-of($map) == 'list' and length($map) == 0) {
    @if  map-has-key($map, $key) {
      @return map-get($map, $key);
    } @else {
      @error 'Key: `#{$key}` is not available in `#{$map}`';
    }
  } @else {
    @error '`#{$map}` is not a valid map';
  }
}

/// Convert the given `$val` to a Boolean. Empty values are considered as false.
////
/// @access private
///
/// @param {*} $val - Value to convert.
///
/// @returns {Boolean} Converted Boolean value.
@function -zf-bool($val) {
  @return $val != false and has-value($val);
}

// Foundation for Sites
// https://get.foundation
// Licensed under MIT Open Source

////
/// @group breakpoints
////

/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.
/// @type Map
$breakpoints: (
        small: 0,
        medium: 640px,
        large: 1024px,
        xlarge: 1200px,
        xxlarge: 1440px,
) !default;

/// A list of named HiDPI breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries for resolutions.
/// Values must represent the device pixels / web pixels ration and be unitless or in DPPX.
/// @type Map
$breakpoints-hidpi: (
        hidpi-1: 1,
        hidpi-1-5: 1.5,
        hidpi-2: 2,
        retina: 2,
        hidpi-3: 3
) !default;

/// The largest named breakpoint in which to include print as a media type
/// @type Keyword
$print-breakpoint: large !default;
$-zf-zero-breakpoint: small !default;
$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');

@if nth(map-values($breakpoints), 1) != 0 {
  @error 'The first key in the $breakpoints map must have a value of "0".';
} @else {
  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);
}

/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.
/// @type List
$breakpoint-classes: (small medium large) !default;

/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.
///
/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.
@function breakpoint($val: $-zf-zero-breakpoint) {
  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi
  // See https://www.w3.org/TR/css-values-3/#absolute-lengths
  $std-web-dpi: 96;
  // Size or keyword
  $bp: nth($val, 1);
  // Value of the following breakpoint
  $bp-next: null;
  // Value for max-width media queries
  $bp-min: null;
  // Value for min-width media queries
  $bp-max: null;
  // Direction of media query (up, down, or only)
  $dir: if(length($val) > 1, nth($val, 2), up);
  // If named, name of the breakpoint
  $name: null;
  // If the breakpoint is a HiDPI breakpoint
  $hidpi: false;

  // Orientation media queries have a unique syntax
  @if $bp == 'landscape' or $bp == 'portrait' {
    @return '(orientation: #{$bp})';
  }

  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.
  @if type-of($bp) == 'string' {
    @if map-has-key($breakpoints, $bp) {
      $name: $bp;
      $bp: map-get($breakpoints, $name);
      $bp-next: -zf-map-next($breakpoints, $name);
    } @else if map-has-key($breakpoints-hidpi, $bp) {
      $name: $bp;
      $bp: map-get($breakpoints-hidpi, $name);
      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);
      $hidpi: true;
    } @else {
      $bp: 0;
      @warn 'breakpoint(): "#{$val}" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';
    }
  }

  @if not $name and $dir == 'only' {
    @warn 'breakpoint(): Only named media queries can have an `only` range.';
    @return null;
  }

  // Only 'only' and 'up' have a min limit.
  @if $dir == 'only' or $dir == 'up' {
    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));
  }

  // Only 'only' and 'down' have a max limit.
  @if $dir == 'only' or $dir == 'down' {
    // If the breakpoint is a value, use it as max limit.
    @if not $name {
      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));
    }

    // If the breakpoint is named, the max limit is the following breakpoint - 1px.
    @else if $bp-next {
      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).
      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.
      // See https://github.com/foundation/foundation-sites/issues/11313
      $bp-max: if($hidpi, $bp-next - (1/$std-web-dpi), -zf-bp-to-em($bp-next) - .00125);
    }
  }

  // Generate the media query string from min and max limits.
  @if $hidpi {
    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.
    // See https://caniuse.com/#feat=css-media-resolution
    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);
    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);
    @return zf-str-join(
    -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),
    -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),
    ', ');
  } @else {
    @return -zf-bp-join($bp-min, $bp-max);
  }
}

/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:
///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.
///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.
///  - If a rem value is passed, the unit will be changed to em.
///  - If an em value is passed, the value will be used as-is.
///
/// If multiple values are passed, the mixin will generate a media query for each of them as described above.
/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that
/// change across breakpoints.
///
/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.
///
/// @output If the breakpoint is "0px and larger", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.
@mixin breakpoint($values...) {
  @for $i from 1 through length($values) {
    $value: nth($values, $i);
    $str: breakpoint($value);
    $bp: index($-zf-breakpoints-keys, nth($value, 1));
    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);
    // Direction of media query (up, down, or only)
    $dir: if(length($value) > 1, nth($value, 2), up);
    $old-zf-size: null;
    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords
    $-zf-size: $old-zf-size !global;

    // Make breakpoint size available as a variable
    @if global-variable-exists(-zf-size) {
      $old-zf-size: $-zf-size;
    }

    // If $str is still an empty string, no media query is needed
    @if $str == '' {
      @content;
    }

    // Otherwise, wrap the content in a media query
    @else {
      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types
      // generate print if the breakpoint affects the print-breakpoint (or smaller).
      // This means the current condition only needs to be extended so 'down' always generates print.
      @if $bp != null and ($bp <= $pbp or $dir == down) {
        @media print, screen and #{$str} {
          @content;
        }
      } @else {
        @media screen and #{$str} {
          @content;
        }
      }
    }
  }
}

/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.
/// @access private
///
/// @param {Map} $map - Map to convert.
///
/// @returns {String} A string containing the map's contents.
@function -zf-bp-serialize($map) {
  $str: '';
  $str: str-slice($str, 1, -2);
  @each $key, $value in $map {
    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';
  }

  @return $str;
}

/// Find the next key in a map.
/// @access private
///
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $key - Key to use as a starting point.
///
/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.
@function -zf-map-next($map, $key) {
  // Store the keys of the map as a list
  $values: map-keys($map);
  $i: 0;

  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map
  @if  map-has-key($map, $key) {
    $i: index($values, $key) + 1;
  }

  // If the key doesn't exist, or it's the last key in the map, return null
  @if  $i > length($map) or $i == 0 {
    @return null;
  }

  // Otherwise, return the value
  @else {
    @return map-get($map, nth($values, $i));
  }
}

/// Find the next number in a map.
/// @access private
///
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $number - Number to use as a starting point.
///
/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.
@function -zf-map-next-number($map, $number) {
  $next_number: null;

  @each $k, $v in $map {
    @if type-of($v) == 'number' and $v > $number and ($next_number == null or $v < $next_number) {
      $next_number: $v;
    }
  }

  @return $next_number;
}

/// Return a list of our named breakpoints less than $key. Useful for dealing with
/// responsive gutters for the grid.
/// @access private
///
/// @param {String} $key - Key to use as last breakpoint.
///
/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero
@function -zf-breakpoints-less-than($key) {
  $list: ();
  $found_key: false;

  @each $name in $-zf-breakpoints-keys {
    @if  $name == $key {
      $found_key: true;
    }
    @if not $found_key {
      $list: append($list, $name);
    }
  }
  @return $list;
}

/// Return a list of our named breakpoints less than $key. Useful for dealing with
/// responsive gutters for the grid.
/// @access private
///
/// @param {String} $breakpoint - a named or non-named breakpoint.
///
/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero
@function -zf-closest-named-breakpoint($breakpoint) {
  $last: $-zf-zero-breakpoint;
  $found: false;
  $value: unitless-calc($breakpoint, 1px);
  @each $key, $val in $breakpoints {
    @if not $found {
      @if unitless-calc($val) > $value {
        $found: true;
      } @else {
        $last: $key;
      }
    }
  }

  @return $last;
}

/// Get a value for a breakpoint from a responsive config map or single value.
/// - If the config is a single value, return it regardless of `$value`.
/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.
/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.
/// @access private
///
/// @param {Number|Map} $map - Responsive config map or single value.
/// @param {Keyword} $value - Breakpoint name to use.
///
/// @return {Mixed} The corresponding breakpoint value.
@function -zf-get-bp-val($map, $value) {
  // If the given map is a single value, return it
  @if type-of($map) == 'number' {
    @return $map;
  }

  // Check if the breakpoint name exists globally
  @if not map-has-key($breakpoints, $value) {
    @if type-of($value) == 'number' {
      $value: -zf-closest-named-breakpoint($value);
    } @else {
      @return null;
    }
  }

  // Check if the breakpoint name exists in the local config map
  @else if map-has-key($map, $value) {
    // If it does, just return the value
    @return map-get($map, $value);
  }

  // Otherwise, find the next lowest breakpoint and return that value
  @else {
    $anchor: null;
    $found: false;

    @each $key, $val in $breakpoints {
      @if not $found {
        @if map-has-key($map, $key) {
          $anchor: $key;
        }
        @if $key == $value {
          $found: true;
        }
      }
    }

    @return map-get($map, $anchor);
  }
}

/// Return the best breakpoint to use according to the calling context. It returns in order:
/// 1. the given `$value` argument if it is not null.
/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)
/// 3. the given `$default` argument.
/// @access private
///
/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.
/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.
///
/// @return {Keyword} The resolved breakpoint.
@function -zf-current-breakpoint($value: null, $default: null) {
  @if  $value != null {
    @return $value;
  } @else if (variable-exists(-zf-size) and type-of($-zf-size) != 'number') and $-zf-size != null {
    @return $-zf-size;
  } @else {
    @return $default;
  }
}

/// Return media query string from the given min and/or max limits.
/// If a limit is equal to `null` or `0`, it is ignored.
/// @access private
///
/// @param {Number} $min [0] - Min media query limit.
/// @param {Number} $max [0] - Max media query limit.
/// @param {String} $min-name ['min-width'] - Name of the min media query limit.
/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.
///
/// @returns {String} Media Query string.
@function -zf-bp-join(
  $min: 0,
  $max: 0,
  $min-name: 'min-width',
  $max-name: 'max-width'
) {
  @return zf-str-join(
  if($min and $min > 0, '(#{$min-name}: #{$min})', null),
  if($max and $max > 0, '(#{$max-name}: #{$max})', null),
  ' and ');
}

$small-up: '';
$small-only: '';

@if map-has-key($breakpoints, small) {
  $small-up: screen;
  $small-only: unquote('screen and #{breakpoint(small only)}');
}

$medium-up: '';
$medium-only: '';

@if map-has-key($breakpoints, medium) {
  $medium-up: unquote('screen and #{breakpoint(medium)}');
  $medium-only: unquote('screen and #{breakpoint(medium only)}');
}

$large-up: '';
$large-only: '';

@if map-has-key($breakpoints, large) {
  $large-up: unquote('screen and #{breakpoint(large)}');
  $large-only: unquote('screen and #{breakpoint(large only)}');
}

$xlarge-up: '';
$xlarge-only: '';

@if map-has-key($breakpoints, xlarge) {
  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');
  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');
}

$xxlarge-up: '';

@if map-has-key($breakpoints, xxlarge) {
  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');
}
